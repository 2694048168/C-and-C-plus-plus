
# vcpkg configuration 需要根据平台进行配置
# "vcpkg help triplet" command: Available architecture triplets
set(CMAKE_TOOLCHAIN_FILE "D:/Development/vcpkg/scripts/buildsystems/vcpkg.cmake")
if(CMAKE_SYSTEM_NAME MATCHES "Linux")
    message(STATUS "Configuring on/for Linux")
    if(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "i386")
        message(STATUS "i386 architecture detected")
        set(VCPKG_HOST_TRIPLET "x86-linux")
        set(VCPKG_TARGET_TRIPLET "x86-linux")
    elseif(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "i686")
        message(STATUS "i686 architecture detected")
        set(VCPKG_HOST_TRIPLET "x86-linux")
        set(VCPKG_TARGET_TRIPLET "x86-linux")
    elseif(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "x86_64")
        message(STATUS "x86_64 architecture detected")
        set(VCPKG_HOST_TRIPLET "x64-linux")
        set(VCPKG_TARGET_TRIPLET "x64-linux")
    elseif(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "AMD64")
        message(STATUS "AMD64 architecture detected")
        set(VCPKG_HOST_TRIPLET "x64-linux")
        set(VCPKG_TARGET_TRIPLET "x64-linux")
    else()
        message(STATUS "host processor architecture is unknown")
    endif()
elseif(CMAKE_SYSTEM_NAME MATCHES "Darwin")
    message(STATUS "Configuring on/for macOS")
    if(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "x86_64")
        message(STATUS "x86_64 architecture detected")
        set(VCPKG_HOST_TRIPLET "x64-osx")
        set(VCPKG_TARGET_TRIPLET "x64-osx")
    else()
        message(STATUS "host processor architecture is unknown")
    endif()
elseif(CMAKE_SYSTEM_NAME MATCHES "Windows")
    message(STATUS "Configuring on/for Windows")
    if(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "i386")
        message(STATUS "i386 architecture detected")
        set(VCPKG_HOST_TRIPLET "x86-windows")
        set(VCPKG_TARGET_TRIPLET "x86-windows")
    elseif(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "i686")
        message(STATUS "i686 architecture detected")
        set(VCPKG_HOST_TRIPLET "x86-windows")
        set(VCPKG_TARGET_TRIPLET "x86-windows")
    elseif(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "x86_64")
        message(STATUS "x86_64 architecture detected")
        set(VCPKG_HOST_TRIPLET "x64-windows")
        set(VCPKG_TARGET_TRIPLET "x64-windows")
    elseif(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "AMD64")
        message(STATUS "AMD64 architecture detected")
        set(VCPKG_HOST_TRIPLET "x64-windows")
        set(VCPKG_TARGET_TRIPLET "x64-windows")
    else()
        message(STATUS "host processor architecture is unknown")
    endif()
else()
    message(STATUS "Configuring NOT on/for ${CMAKE_SYSTEM_NAME}")
endif()
# https://learn.microsoft.com/en-us/vcpkg/reference/vcpkg-json
# the configuration JSON file 'vcpkg.json'
# ==============================================================

# MinGW+Clang | Ninja | CMake | VSCode + clangd + c/c++ Snippets
if(CMAKE_SYSTEM_NAME MATCHES "Linux")
    message(STATUS "Configuring Compiler with GCC on/for Linux")
    set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
    set(CMAKE_C_COMPILER "gcc") # clang | gcc | MSVC(cl)
    set(CMAKE_CXX_COMPILER "g++") # clang++ | g++ | MSVC(cl)
elseif(CMAKE_SYSTEM_NAME MATCHES "Darwin")
    message(STATUS "Configuring Compiler with clang(LLVM) on/for macOS")
    set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
    set(CMAKE_C_COMPILER "clang") # clang | gcc | MSVC(cl)
    set(CMAKE_CXX_COMPILER "clang++") # clang++ | g++ | MSVC(cl)
elseif(CMAKE_SYSTEM_NAME MATCHES "Windows")
    message(STATUS "Configuring Compiler with MSVC on/for Windows")
    set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
    set(CMAKE_C_COMPILER "MSVC") # clang | gcc | MSVC(cl)
    set(CMAKE_CXX_COMPILER "MSVC") # clang++ | g++ | MSVC(cl)
else()
    message(STATUS "Configuring NOT on/for ${CMAKE_SYSTEM_NAME}")
    set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
    set(CMAKE_C_COMPILER "clang") # clang | gcc | MSVC(cl)
    set(CMAKE_CXX_COMPILER "clang++") # clang++ | g++ | MSVC(cl)
endif()
# ==================================================================